version: '3.8'

# 定义网络配置
networks:
  quant-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 定义数据卷
volumes:
  logs:

# 服务定义
services:
  # 注意：PostgreSQL数据库和Redis服务已在EC2外部部署
  # PostgreSQL在EC1上（内网地址：172.31.24.87）
  # Redis在EC2上（内网地址：172.31.25.234）
  # 应用服务将通过内网连接到这些外部服务

  # 后端服务
  backend:
    build: 
      context: ./backend
      args:
        - ENVIRONMENT=production
        - TZ=Asia/Shanghai
    container_name: quant-backend
    environment:
      - TZ=Asia/Shanghai
      - PGHOST=${PGHOST}
      - PGPORT=${PGPORT}
      - PGDATABASE=${PGDATABASE}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=INFO
      - WORKERS_COUNT=2
    ports:
      - "8000:8000"
    networks:
      - quant-network
    restart: always
    volumes:
      - logs:/app/backend/logs
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '1G'

  # Celery Worker服务 - 用于参数调优
  celery_worker_tuning:
    build: 
      context: ./backend
      args:
        - ENVIRONMENT=production
        - TZ=Asia/Shanghai
    container_name: quant-celery-worker-tuning
    command: celery -A app.celery_config.celery_app worker --loglevel=info --pool=solo -Q tuning,backtest
    environment:
      - TZ=Asia/Shanghai
      - PGHOST=${PGHOST}
      - PGPORT=${PGPORT}
      - PGDATABASE=${PGDATABASE}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - quant-network
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    volumes:
      - logs:/app/backend/logs
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '1G'

  # 前端服务
  frontend:
    build: 
      context: ./frontend
      args:
        - VITE_API_BASE_URL=http://backend:8000
        - TZ=Asia/Shanghai
    container_name: quant-frontend
    ports:
      - "80:80"
    environment:
      - TZ=Asia/Shanghai
      - API_BASE_URL=http://backend:8000  # 指向Docker内部的后端服务
    networks:
      - quant-network
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512M'
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3